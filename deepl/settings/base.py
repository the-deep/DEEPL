"""
Django settings for deepl project.

Generated by 'django-admin startproject' using Django 1.11.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from celery.schedules import crontab

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
)


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'rp(xxjh(04t_$x6no@m^8il14_v_r@wkn7k4e(1j)@u76$&x*d'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'corsheaders',
    'rest_framework',
    # SENTRY
    'raven.contrib.django.raven_compat',

    'api_auth',
    'core',
    'api',
    'helpers',
    'classifier',
    'topic_modeling',
    'correlation',
    'NER',
    'similarity',
    'clustering',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'deepl.middleware.token_middleware.CheckTokenMiddleware',
]
# Because, testcases are in snakecase. The env var is set while running test
if os.environ.get('NO_CAMELCASE_MIDDLEWARE') is None:
    MIDDLEWARE.append(
        'deepl.middleware.camelcase_middleware.CamelCaseMiddleware',
    )

CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'deepl.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'deepl.wsgi.application'

REST_FRAMEWORK = {
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_THROTTLE_CLASSES': (
        'deepl.throttling.custom_throttling.DemoUserRateThrottle',
    ),
    'DEFAULT_THROTTLE_RATES': {
        'anon': '{}/day'.format(os.environ.get('THROTTLE_RATE', 300))
    },
}


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

_DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ['DB_NAME'],
        'USER': os.environ['DB_USER'],
        'PASSWORD': os.environ['DB_PASSWORD'],
        'HOST': os.environ['DB_HOST'],
        'PORT': os.environ['DB_PORT'],
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, "assets"), )


if os.environ.get('USE_PAPERTRAIL', 'False').lower() == 'true':
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'simple': {
                'format': '%(asctime)s ' + os.environ.get('EBS_HOSTNAME', '') +
                          ' %(levelname)s' +
                          ': %(message)s',
                'datefmt': '%Y-%m-%dT%H:%M:%S',
            },
        },
        'handlers': {
            'SysLog': {
                'level': 'INFO',
                'class': 'logging.handlers.SysLogHandler',
                'formatter': 'simple',
                'address': (os.environ.get('PAPERTRAIL_HOST'),
                            int(os.environ.get('PAPERTRAIL_PORT')))
            },
            'FileHandler': {
                'level': 'INFO',
                'class': 'logging.FileHandler',
                'formatter': 'simple',
                'filename': '/tmp/deepl.log'
            },
        },
        'loggers': {
            'celery': {
                'handlers': ['SysLog'],
                'propagate': True
            },
            'channels': {
                'handlers': ['SysLog'],
                'propagate': True
            },
            'django': {
                'handlers': ['SysLog'],
                'propagate': True
            },
            '': {
                'handlers': ['SysLog'],
                'propagate': True
            },
        },
    }


CELERY_BEAT_SCHEDULE = {
    'topic_modeling_every_other_day': {
        'task': 'topic_modeling.tasks.get_topics_task',
        'schedule': crontab(day_of_week='*/2'),
    },
    'topic_modeling_rerun_all': {
        'task': 'topic_modeling.tasks.rerun_topic_modeling',
        'schedule': crontab(day_of_week='*/3'),
    },
    'recluster_models_every_other_day': {
        'task': 'clustering.tasks.recluster_all_models',
        'schedule': crontab(day_of_week='*/2'),
    }
}


# SENTRY
SENTRY_DSN = os.environ.get('SENTRY_DSN', '')
if SENTRY_DSN:
    RAVEN_CONFIG = {
        'dsn': os.environ.get('SENTRY_DSN', ''),
        # If you are using git, you can also automatically configure the
        # release based on the git info.
        # 'release': raven.fetch_git_sha(os.path.abspath(os.pardir)),
        'environment': os.environ.get('SERVER_ENVIRONMENT', 'local')
        }
